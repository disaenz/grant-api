name: "üê≥ Docker CI/CD: Build, Scan & Deploy Lambda üöÄ"

on:
  push:
    branches:
      - dev

env:
  ECR_REPOSITORY: grant-api

jobs:
  build:
    name: "üê≥ Build & Push Image"
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build_image.outputs.image_uri }}
    steps:
      - name: "üîÑ Checkout repository"
        uses: actions/checkout@v3

      - name: "üîê Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "üÜî Get AWS Account ID"
        run: |
          echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: "üîì Login to ECR"
        uses: aws-actions/amazon-ecr-login@v1
    
      - name: "üîí Docker login to private ECR"
        run: |
            aws ecr get-login-password \
                --region ${{ secrets.AWS_REGION }} \
            | docker login \
                --username AWS \
                --password-stdin \
                ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com


      - name: "üê≥ Build & Push Docker image"
        id: build_image
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          IMAGE_URI=${ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          docker buildx build \
            --platform linux/amd64 \
            -f Dockerfile.lambda \
            -t $IMAGE_URI \
            .
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "DEBUG - $IMAGE_URI"
          ls -la
    
      - name: "üßπ Cleanup all untagged images in ECR"
        run: |
          REPO_NAME=${{ env.ECR_REPOSITORY }}
          REGION=${{ secrets.AWS_REGION }}
          # Get all untagged image IDs (as JSON array)
          IMAGE_IDS=$(aws ecr list-images \
            --repository-name "$REPO_NAME" \
            --region "$REGION" \
            --filter tagStatus=UNTAGGED \
            --query 'imageIds' \
            --output json)
          if [ "$IMAGE_IDS" != "[]" ]; then
            echo "Deleting untagged images..."
            aws ecr batch-delete-image \
              --repository-name "$REPO_NAME" \
              --region "$REGION" \
              --image-ids "$IMAGE_IDS"
          else
            echo "No untagged images found."
          fi

  scan:
    name: "üîç Scan Image with Trivy"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: "üîê Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "üîì Login to ECR"
        uses: aws-actions/amazon-ecr-login@v1

      - name: "üêû Debug: Print image URI"
        run: |
            echo "IMAGE_URI: ${{ needs.build.outputs.image_uri }}"

      - name: "üõ°Ô∏è Scan image"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image_uri }}
          severity: CRITICAL,HIGH
          exit-code: '1'

  deploy:
    name: "üöÄ Deploy to Lambda"
    runs-on: ubuntu-latest
    needs: scan
    steps:
      - name: "üîê Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "üöÄ Update Lambda function"
        run: |
          aws lambda update-function-code \
            --function-name grant-api \
            --image-uri ${{ needs.build.outputs.image_uri }}
